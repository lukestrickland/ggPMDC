% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/analysis.R
\name{DIC}
\alias{DIC}
\title{Deviance Information Criteria}
\usage{
DIC(object, start = 1, end = NA, BPIC = FALSE, ...)
}
\arguments{
\item{object}{posterior samples from one participant}

\item{start}{start from which iteration.}

\item{end}{end at which iteration. For example, set
\code{start = 101} and \code{end = 1000}, instructs the function to
calculate from 101 to 1000 iteration.}

\item{...}{other plotting arguments passing through dot dot dot.}
}
\description{
Calculate DIC and BPIC.
}
\details{
This function implements three different definitions of the "effective
number of parameters of the model". First is from Spiegelhalter et al
(2002, p. 587), "... that pD can be considered as a 'mean deviance minus
the deviance of the means'". Second is from Gelman et al (2014, p. 173,
equation 7.10), and third subtracts the minimal value of the deviance from
the mean of the deviance.
}
\examples{
## Calculate DIC from data of one participant
\dontrun{
model <- BuildModel(
  p.map     = list(A = "1", B = "1", t0 = "1", mean_v = "M", sd_v = "1",
                  st0 = "1"),
  match.map = list(M = list(s1 = 1, s2 = 2)),
  factors   = list(S = c("s1", "s2")),
  constants = c(st0 = 0, sd_v = 1),
  responses = c("r1", "r2"),
  type      = "norm")

p.vector <- c(A = .75, B = 1.25, t0 = .15, mean_v.true = 2.5,
              mean_v.false = 1.5)
ntrial <- 50
dat <- simulate(model, nsim = ntrial, ps = p.vector)
dmi <- BuildDMI(dat, model)

p.prior <- BuildPrior(
  dists = c("tnorm", "tnorm", "beta", "tnorm", "tnorm"),
  p1    = c(A = 1, B = 1, t0 = 1, mean_v.true = 1, mean_v.false = 1),
  p2    = c(1,  1,  1, 1, 1),
  lower = c(rep(0, 3),  rep(NA, 2)),
  upper = c(rep(NA, 2), 1, rep(NA, 2)))

## Sampling
fit0 <- StartNewsamples(dmi, p.prior)
fit  <- run(fit0, thin = 8)

DIC(fit)
DIC(fit)
DIC(fit, start=100, end=200)
DIC(fit, BPIC=TRUE)
DIC(fit, BPIC=TRUE, start=201, end=400)
}

## Calculate DICs from data of 8 participant
\dontrun{
model <- BuildModel(
p.map     = list(a = "1", v = "F", z = "1", d = "1", sz = "1", sv = "1",
                 t0 = "1", st0 = "1"),
match.map = list(M = list(s1 = "r1", s2 = "r2")),
factors   = list(S = c("s1", "s2"), F = c("f1", "f2")),
constants = c(st0 = 0, d = 0),
responses = c("r1", "r2"),
type      = "rd")
npar <- length(GetPNames(model))

## Population distribution
pop.mean  <- c(a=2,   v.f1=4,  v.f2=3,  z=0.5, sz=0.3, sv=1,  t0=0.3)
pop.scale <- c(a=0.5, v.f1=.5, v.f2=.5, z=0.1, sz=0.1, sv=.3, t0=0.05)
pop.prior <- BuildPrior(
  dists = rep("tnorm", npar),
  p1    = pop.mean,
  p2    = pop.scale,
  lower = c(0,-5, -5, 0, 0, 0, 0),
  upper = c(5, 7,  7, 1, 2, 1, 1))

## Simulate some data
dat <- simulate(model, nsub = 8, nsim = 10, prior = pop.prior)
dmi <- BuildDMI(dat, model)
ps <- attr(dat, "parameters")

p.prior <- BuildPrior(
  dists = rep("tnorm", npar),
  p1    = pop.mean,
  p2    = pop.scale*5,
  lower = c(0,-5, -5, 0, 0, 0, 0),
  upper = c(5, 7,  7, 1, 2, 2, 1))

## Sampling
fit0 <- StartNewsamples(dmi, p.prior, ncore=1)
fit  <- run(fit0, ncore=4)  ## No printing when running in RStudio

## Calculate DIC for participant 1
DIC(fit[[1]])

## Calculate all participants
res <- DIC(fit)

## BPIC
res <- DIC(fit, BPIC = TRUE)
}

}
